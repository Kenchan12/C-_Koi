@page "/auth"
@using KoiFishManager.Models;
@using KoiFishManager.Web.Services;

@inject NavigationManager NavigationManager;
@inject IAuthService AuthService;
@if (ShowErrors)
{
    <div class="alert alert-danger">
        <p>@Error</p>
    </div>
}
<div class="card">
    <div class="card-body">
        <h5 class="card-title">@(!isRegistering ? "Login" : "Register Account")</h5>

        @if (isRegistering)
        {
            <!-- Register Form -->
            <EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
        
                <div class="form-group" style="margin-bottom: 10px">
                    <label for="username">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="RegisterModel.UserName"></InputText>
                    <ValidationMessage For="()=> RegisterModel.UserName"></ValidationMessage>
                </div>
        
                <div class="form-group" style="margin-bottom: 10px">
                    <label for="email">Email</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="RegisterModel.Email"></InputText>
                    <ValidationMessage For="()=> RegisterModel.Email"></ValidationMessage>
                </div>
        
                <div class="form-group" style="margin-bottom: 10px">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password"></InputText>
                    <ValidationMessage For="()=> RegisterModel.Password"></ValidationMessage>
                </div>
        
                <button type="submit" class="btn btn-primary">Register</button>
            </EditForm>
        }
        else
        {
            <!-- Login Form -->
            <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
        
                <div class="form-group" style="margin-bottom: 10px">
                    <label for="username">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="LoginModel.UserName"></InputText>
                    <ValidationMessage For="()=> LoginModel.UserName"></ValidationMessage>
                </div>
        
                <div class="form-group" style="margin-bottom: 10px">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="LoginModel.Password"></InputText>
                    <ValidationMessage For="()=> LoginModel.Password"></ValidationMessage>
                </div>
                <button type="submit" class="btn btn-success">Login</button>
            </EditForm>
        }
        
        <hr />
        
        <!-- Toggle between Register and Login -->
        <button class="btn btn-link" @onclick="ToggleForm">@(!isRegistering ? "Need an account? Register here" : "Already have an account? Login here")</button>
    </div>
</div>

@code {
    private bool isRegistering = false; // Điều kiện để xác định form nào hiển thị
    private RegisterRequest RegisterModel = new RegisterRequest();
    private LoginRequest LoginModel = new LoginRequest();
    private bool ShowErrors = false;
    private string Error = string.Empty;

    private async Task HandleRegister()
    {
        var registerResponse = await AuthService.Register(RegisterModel);

        if (registerResponse.Successful)
        {
            NavigationManager.NavigateTo("/login"); // Chuyển hướng sau khi đăng ký thành công
        }
        else
        {
            ShowErrors = true;
            Error = registerResponse.Error;
        }
    }
    private async Task HandleLogin()
    {
        ShowErrors = false;
    
        var result = await AuthService.Login(LoginModel);
        if (result.Successful)
        {
            NavigationManager.NavigateTo("/ponds"); // Chuyển hướng sau khi đăng nhập thành công
        }
        else
        {
            ShowErrors = true;
            Error = result.Error;
        }
    }
    
    private void ToggleForm()
    {
        isRegistering = !isRegistering; // Chuyển giữa trang đăng ký và đăng nhập
    }
}
